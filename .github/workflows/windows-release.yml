name: windows-release

on:
  push:
    tags:
      - 'v*'           # run on git tags like v1.2.3; adjust if you prefer manual dispatch
  workflow_dispatch:


jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Install MSYS2 and MinGW (Windows)
        uses: msys2/setup-msys2@v2
        with:
          update: true
          cache: true
          install: >-
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-libvips
            mingw-w64-x86_64-toolchain 
            mingw-w64-x86_64-cmake 
            mingw-w64-x86_64-ninja 
            mingw-w64-x86_64-meson 
            git 
            mingw-w64-x86_64-glib2 
            mingw-w64-x86_64-highway 
            mingw-w64-x86_64-libspng 
            mingw-w64-x86_64-nasm 
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libimagequant

      - name: Make Temporary Directory
        shell: msys2 {0}
        run: |
          mkdir /tempdir
      
      - name: Build MozJpeg
        shell: msys2 {0}
        run: |
          cd /tempdir
          git clone https://github.com/mozilla/mozjpeg.git
          cd mozjpeg
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$MINGW_PREFIX ..
          ninja install

      - name: Build Libvips
        shell: msys2 {0}
        run: |
          cd /tempdir
          git clone https://github.com/libvips/libvips.git
          cd libvips

          # this command is long as my dih -tuxebro
          meson setup build \
            --prefix=/mingw64 \
            --buildtype=release \
            -Ddeprecated=false \
            -Dexamples=false \
            -Dmodules=disabled \
            -Dintrospection=disabled \
            -Dcplusplus=false \
            -Dvapi=false \
            -Djpeg=enabled \
            -Dspng=enabled \
            -Dimagequant=enabled \
            -Dhighway=enabled \
            -Dtiff=disabled \
            -Dwebp=disabled \
            -Dheif=disabled \
            -Dheif-module=disabled \
            -Dpdfium=disabled \
            -Dopenslide=disabled \
            -Dopenslide-module=disabled \
            -Dorc=disabled \
            -Dcfitsio=disabled \
            -Dcgif=disabled \
            -Dexif=disabled \
            -Dfftw=disabled \
            -Dfontconfig=disabled \
            -Darchive=disabled \
            -Duhdr=disabled \
            -Djpeg-xl=disabled \
            -Djpeg-xl-module=disabled \
            -Dmagick=disabled \
            -Dmatio=disabled \
            -Dnifti=disabled \
            -Dopenexr=disabled \
            -Dopenjpeg=disabled \
            -Dpangocairo=disabled \
            -Dpoppler=disabled \
            -Dpoppler-module=disabled \
            -Dquantizr=disabled \
            -Draw=disabled \
            -Drsvg=disabled \
            -Dzlib=enabled \
            -Dnsgif=false \
            -Dppm=false \
            -Danalyze=false \
            -Dradiance=false \
            -Dlcms=disabled \
            -Dcpp-docs=false

          meson compile -C build
          meson install -C build
      
      - name: Copy DLLs
        run: |
          $MSYS_BIN = "D:\a\_temp\msys64\mingw64\bin"

          $Dlls = @(
              "libvips-42.dll",
              "libjpeg-62.dll",
              "libspng.dll",
              "libimagequant.dll",
              "libhwy.dll",
              "libglib-2.0-0.dll",
              "libgobject-2.0-0.dll",
              "libgio-2.0-0.dll",
              "libexpat-1.dll",
              "libarchive-13.dll",
              "libintl-8.dll",
              "libffi-8.dll",
              "zlib1.dll",
              "libgmodule-2.0-0.dll",
              "libpcre2-8-0.dll",
              "libgcc_s_seh-1.dll",
              "libiconv-2.dll",
              "libwinpthread-1.dll",
              "libstdc++-6.dll"
          )

          foreach ($dll in $Dlls) {
              Copy-Item -Path "$MSYS_BIN\$dll" -Destination "${{ github.workspace }}" -Force
          }

      - name: wer is my lib bips
        run: pkg-config --libs --cflags vips
        shell: msys2 {0}

      - name: Get Licenses of Libraries (look mom, im a law abiding citizen!)
        run: |
          $licensesDir = ".\licenses"

          if (-not (Test-Path $licensesDir)) {
              New-Item -ItemType Directory -Path $licensesDir | Out-Null
          }

          echo "Downloading third-party licenses..."

          # libvips
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/libvips/libvips/refs/heads/master/LICENSE" -OutFile "$licensesDir\libvips"

          # MozJPEG
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/mozilla/mozjpeg/refs/heads/master/LICENSE.md" -OutFile "$licensesDir\mozjpeg"

          # libspng
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/randy408/libspng/refs/heads/master/LICENSE" -OutFile "$licensesDir\libspng"

          # libimagequant
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/ImageOptim/libimagequant/refs/heads/main/COPYRIGHT" -OutFile "$licensesDir\libimagequant"

          # Highway
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/google/highway/refs/heads/master/LICENSE-BSD3" -OutFile "$licensesDir\highway"

          # GLib / GObject / GIO / GModule
          Invoke-WebRequest -Uri "https://gitlab.gnome.org/GNOME/glib/-/raw/main/LICENSES/LGPL-2.1-or-later.txt" -OutFile "$licensesDir\glib"

          # libexpat
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/libexpat/libexpat/refs/heads/master/COPYING" -OutFile "$licensesDir\libexpat"

          # libarchive
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/libarchive/libarchive/refs/heads/master/COPYING" -OutFile "$licensesDir\libarchive"

          # libintl
          $gettextTar = "$env:TEMP\gettext.tar.gz"
          Invoke-WebRequest -Uri "https://ftp.gnu.org/gnu/gettext/gettext-0.21.tar.gz" -OutFile $gettextTar
          tar -xzf $gettextTar -C $env:TEMP "gettext-0.21/gettext-runtime/intl"
          Copy-Item "$env:TEMP\gettext-0.21\gettext-runtime\intl\COPYING.LIB" "$licensesDir\libintl"
          
          # libffi
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/libffi/libffi/refs/heads/master/LICENSE" -OutFile "$licensesDir\libffi"

          # zlib
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/madler/zlib/refs/heads/develop/LICENSE" -OutFile "$licensesDir\zlib"

          # libpcre2
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/PCRE2Project/pcre2/refs/heads/master/LICENCE.md" -OutFile "$licensesDir\libpcre2"

          # mingw
          Invoke-WebRequest -Uri "https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/COPYING?format=raw" -OutFile "$licensesDir\mingw"

          # libiconv
          $libiconvTar = "$env:TEMP\libiconv.tar.gz"
          Invoke-WebRequest -Uri "https://ftp.gnu.org/gnu/libiconv/libiconv-1.18.tar.gz" -OutFile $libiconvTar
          tar -xzf $libiconvTar -C $env:TEMP "libiconv-1.18/"
          Copy-Item "$env:TEMP\libiconv-1.18\COPYING.LIB" "$licensesDir\libiconv"

      - name: Run GoReleaser (Windows)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: "latest"
          args: release --config .goreleaser.windows.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1
          CGO_CFLAGS: "-ID:\\a\\_temp\\msys64\\mingw64\\include -ID:\\a\\_temp\\msys64\\mingw64\\include\\glib-2.0 -ID:\\a\\_temp\\msys64\\mingw64\\lib\\glib-2.0\\include"
          CGO_LDFLAGS: "-LD:\\a\\_temp\\msys64\\mingw64\\lib"
          PKG_CONFIG_PATH: "D:\\a\\_temp\\msys64\\mingw64\\lib\\pkgconfig"
          GOEXPERIMENT: "jsonv2"